apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: agentos-ingress
  namespace: production
  labels:
    app: agentos
    component: ingress
    environment: production
  annotations:
    # Ingress Controller
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"

    # SSL Configuration
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-protocols: "TLSv1.2 TLSv1.3"
    nginx.ingress.kubernetes.io/ssl-ciphers: "ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384"

    # Rate Limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/rate-limit-connections: "20"

    # Security Headers
    nginx.ingress.kubernetes.io/custom-http-errors: "404,503"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Strict-Transport-Security: max-age=31536000; includeSubDomains";
      more_set_headers "Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https://api.stripe.com https://js.stripe.com; frame-src https://js.stripe.com https://hooks.stripe.com;";
      more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
      more_set_headers "Permissions-Policy: geolocation=(), microphone=(), camera=()";

    # Compression
    nginx.ingress.kubernetes.io/enable-gzip: "true"
    nginx.ingress.kubernetes.io/gzip-min-length: "1000"

    # CORS
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://agentos.io,https://app.agentos.io,https://admin.agentos.io"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"

    # Timeouts
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"

    # Buffer sizes
    nginx.ingress.kubernetes.io/proxy-buffer-size: "16k"
    nginx.ingress.kubernetes.io/proxy-buffers-number: "8"

    # Client body size
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"

    # WebSocket support
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"

spec:
  tls:
    - hosts:
        - api.agentos.io
        - app.agentos.io
        - admin.agentos.io
      secretName: agentos-tls

  rules:
    # API Domain
    - host: api.agentos.io
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: agentos-api
                port:
                  number: 80

    # App Domain (Frontend)
    - host: app.agentos.io
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: agentos-frontend
                port:
                  number: 3000

    # Admin Domain
    - host: admin.agentos.io
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: agentos-admin
                port:
                  number: 3001

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: agentos-network-policy
  namespace: production
  labels:
    app: agentos
    component: network-policy
    environment: production
spec:
  podSelector:
    matchLabels:
      app: agentos
  policyTypes:
    - Ingress
    - Egress

  ingress:
    # Allow traffic from ingress controller
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
      ports:
        - protocol: TCP
          port: 8000

    # Allow traffic from monitoring namespace
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 9090

    # Allow inter-pod communication within namespace
    - from:
        - podSelector:
            matchLabels:
              app: agentos
      ports:
        - protocol: TCP
          port: 8000

  egress:
    # Allow DNS resolution
    - to: []
      ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53

    # Allow HTTPS to external services
    - to: []
      ports:
        - protocol: TCP
          port: 443

    # Allow HTTP for internal services
    - to: []
      ports:
        - protocol: TCP
          port: 80

    # Allow database access
    - to: []
      ports:
        - protocol: TCP
          port: 5432

    # Allow Redis access
    - to: []
      ports:
        - protocol: TCP
          port: 6379

    # Allow email services
    - to: []
      ports:
        - protocol: TCP
          port: 587
        - protocol: TCP
          port: 465

---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
  labels:
    app: agentos
    component: cert-manager
    environment: production
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: admin@agentos.io
    privateKeySecretRef:
      name: letsencrypt-prod
    solvers:
      - http01:
          ingress:
            class: nginx
        selector:
          dnsNames:
            - api.agentos.io
            - app.agentos.io
            - admin.agentos.io

---
apiVersion: v1
kind: Service
metadata:
  name: agentos-api-internal
  namespace: production
  labels:
    app: agentos
    component: api-internal
    environment: production
  annotations:
    description: "Internal service for inter-service communication"
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 8000
      targetPort: http
      protocol: TCP
    - name: metrics
      port: 9090
      targetPort: metrics
      protocol: TCP
  selector:
    app: agentos
    component: api
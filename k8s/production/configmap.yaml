apiVersion: v1
kind: ConfigMap
metadata:
  name: agentos-config
  namespace: production
  labels:
    app: agentos
    component: config
    environment: production
data:
  # Application Configuration
  APP_NAME: "AgentOS"
  APP_VERSION: "1.0.0"
  ENVIRONMENT: "production"
  DEBUG: "false"
  API_V1_PREFIX: "/api/v1"

  # Server Configuration
  HOST: "0.0.0.0"
  PORT: "8000"
  WORKERS: "4"

  # Domain Configuration
  API_URL: "https://api.agentos.io"
  FRONTEND_URL: "https://agentos.io"
  APP_URL: "https://app.agentos.io"
  ALLOWED_ORIGINS: "https://agentos.io,https://app.agentos.io,https://admin.agentos.io"

  # Database Configuration
  DATABASE_ECHO: "false"
  DATABASE_POOL_SIZE: "20"
  DATABASE_MAX_OVERFLOW: "30"

  # Redis Configuration
  REDIS_POOL_SIZE: "50"

  # Vector Database
  QDRANT_COLLECTION_NAME: "business_context_prod"

  # LLM Configuration
  DEFAULT_LLM_PROVIDER: "openai"
  DEFAULT_MODEL: "gpt-4o"
  EMBEDDING_MODEL: "text-embedding-ada-002"
  EMBEDDING_DIMENSION: "1536"
  MAX_CHUNK_SIZE: "1000"
  CHUNK_OVERLAP: "200"

  # Security Configuration
  ALGORITHM: "HS256"
  ACCESS_TOKEN_EXPIRE_MINUTES: "30"
  FORCE_HTTPS: "true"
  ENABLE_HSTS: "true"
  HSTS_MAX_AGE: "31536000"
  ENABLE_CSP: "true"

  # Rate Limiting
  RATE_LIMIT_REQUESTS: "1000"
  RATE_LIMIT_WINDOW: "60"
  RATE_LIMIT_STORAGE: "redis"

  # File Upload
  MAX_FILE_SIZE: "10485760"  # 10MB
  ALLOWED_FILE_TYPES: "application/pdf,text/plain,application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/msword"

  # Logging
  LOG_LEVEL: "INFO"
  LOG_FORMAT: "json"

  # Health Checks
  HEALTH_CHECK_INTERVAL: "30"
  HEALTH_CHECK_TIMEOUT: "10"

  # Feature Flags
  ENABLE_BETA_FEATURES: "false"
  ENABLE_ANALYTICS: "true"
  ENABLE_TELEMETRY: "true"

  # Background Jobs
  CELERY_WORKERS: "8"

  # Email Configuration
  FROM_EMAIL: "hello@agentos.io"
  SUPPORT_EMAIL: "support@agentos.io"
  SMTP_HOST: "smtp.resend.com"
  SMTP_PORT: "587"

  # CDN Configuration
  CDN_URL: "https://cdn.agentos.io"
  STATIC_URL: "https://static.agentos.io"

  # Backup Configuration
  BACKUP_RETENTION_DAYS: "30"
  BACKUP_SCHEDULE: "0 2 * * *"  # Daily at 2 AM

  # AWS Configuration
  AWS_REGION: "us-east-1"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: production
  labels:
    app: agentos
    component: nginx
    environment: production
data:
  default.conf: |
    upstream api {
        server agentos-api:8000;
    }

    server {
        listen 80;
        listen [::]:80;
        server_name api.agentos.io;

        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Rate limiting
        limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
        limit_req zone=api burst=20 nodelay;

        # Gzip compression
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

        location / {
            proxy_pass http://api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;

            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
        }

        location /health {
            proxy_pass http://api/health;
            access_log off;
        }

        location /metrics {
            proxy_pass http://api/metrics;
            allow 10.0.0.0/8;
            deny all;
        }
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: monitoring-config
  namespace: production
  labels:
    app: agentos
    component: monitoring
    environment: production
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s

    rule_files:
      - "alerts.yml"

    scrape_configs:
      - job_name: 'agentos-api'
        static_configs:
          - targets: ['agentos-api:9090']
        metrics_path: /metrics
        scrape_interval: 30s

      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - production
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true

    alerting:
      alertmanagers:
        - static_configs:
            - targets:
                - alertmanager:9093

  alerts.yml: |
    groups:
      - name: agentos.rules
        rules:
          - alert: HighErrorRate
            expr: rate(agentos_api_requests_total{status=~"5.."}[5m]) > 0.1
            for: 2m
            labels:
              severity: critical
            annotations:
              summary: "High error rate detected"
              description: "Error rate is {{ $value }} requests per second"

          - alert: HighResponseTime
            expr: histogram_quantile(0.95, rate(agentos_response_time_seconds_bucket[5m])) > 2
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High response time detected"
              description: "95th percentile response time is {{ $value }} seconds"

          - alert: DatabaseConnectionsHigh
            expr: postgresql_connections_used / postgresql_connections_max > 0.9
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "Database connection pool almost full"

          - alert: PodCrashLooping
            expr: rate(kube_pod_container_status_restarts_total[15m]) > 0
            for: 5m
            labels:
              severity: critical
            annotations:
              summary: "Pod is crash looping"
              description: "Pod {{ $labels.pod }} in namespace {{ $labels.namespace }} is restarting frequently"
# GitHub Actions workflow para deployment autom√°tico a Railway
# Optimizado para AgentOS con performance m√°xima

name: Deploy to Railway

on:
  push:
    branches: [main, staging]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Tests y validaci√≥n
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio

      - name: Run performance validation
        run: |
          # Test b√°sico de imports y configuraci√≥n
          python -c "from app.main import app; print('‚úÖ App imports successful')"
          python -c "from app.config import settings; print('‚úÖ Config validation successful')"

  # Job 2: Build de imagen Docker optimizada
  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.railway
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Output image
        id: image
        run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT

  # Job 3: Deploy a Railway (solo en main/staging)
  deploy:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging')
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Railway CLI
        run: |
          npm install -g @railway/cli

      - name: Deploy to Railway
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          echo "üöÄ Deploying to Railway..."

          # Seleccionar environment basado en branch
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            ENV="production"
          else
            ENV="staging"
          fi

          echo "üìç Environment: $ENV"

          # Deploy usando la imagen pre-construida
          railway up --service=agentos-backend --environment=$ENV

          # Obtener URL del deployment
          URL=$(railway status --json | jq -r '.deployments[0].url' 2>/dev/null || echo "")

          if [ ! -z "$URL" ]; then
            echo "üåê Deployed to: $URL"
            echo "deployment_url=$URL" >> $GITHUB_OUTPUT

            # Verificar healthcheck
            sleep 10
            if curl -f "$URL/health" > /dev/null 2>&1; then
              echo "‚úÖ Healthcheck passed"
            else
              echo "‚ö†Ô∏è Healthcheck failed"
            fi
          fi

  # Job 4: Performance validation post-deployment
  validate:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install validation dependencies
        run: |
          pip install aiohttp psutil

      - name: Wait for deployment stabilization
        run: sleep 30

      - name: Run performance validation
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          # Obtener URL de Railway
          npm install -g @railway/cli
          URL=$(railway status --json | jq -r '.deployments[0].url' 2>/dev/null || echo "")

          if [ ! -z "$URL" ]; then
            echo "üîç Validating performance for: $URL"

            # Ejecutar script de validaci√≥n
            python scripts/validate_performance.py --url "$URL"

            if [ $? -eq 0 ]; then
              echo "‚úÖ Performance validation passed"
            else
              echo "‚ùå Performance validation failed"
              exit 1
            fi
          else
            echo "‚ö†Ô∏è Could not get deployment URL, skipping validation"
          fi

  # Job 5: Notificaci√≥n de deployment
  notify:
    needs: [deploy, validate]
    runs-on: ubuntu-latest
    if: always() && github.event_name == 'push'
    steps:
      - name: Deployment notification
        run: |
          if [ "${{ needs.deploy.result }}" = "success" ] && [ "${{ needs.validate.result }}" = "success" ]; then
            echo "üéâ Deployment successful!"
            echo "Branch: ${{ github.ref_name }}"
            echo "Commit: ${{ github.sha }}"
            echo "Environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}"
          else
            echo "‚ùå Deployment failed"
            echo "Deploy status: ${{ needs.deploy.result }}"
            echo "Validation status: ${{ needs.validate.result }}"
          fi